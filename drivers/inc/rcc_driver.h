#pragma once

#include "core_cm3.h"
#include "systick.h"
#include "mcu_peripherals.h"

//configuration paramters
#define SYSCLK 8000000u       //System clock in Hz, needs to match with the clock configuration. (default is 8Mhz)
#define SYSTICK_CLK SYSCLK    //Clock used for systick peripheral.

//globals
extern volatile uint32_t ticks; //Global tick counter

//RCC type definitions
typedef enum {
  CLOCK_HSI = 0,  // High-speed internal clock
  CLOCK_HSE = 1,  // High-speed external clock
  CLOCK_PLL = 2   // Phase-locked loop
} rcc_sysclk_src_t;

//prescalers
typedef enum {
  RCC_AHB_PRESCALER_DIV1   = 0x0,  // SYSCLK not divided
  RCC_AHB_PRESCALER_DIV2   = 0x8,  // SYSCLK divided by 2
  RCC_AHB_PRESCALER_DIV4   = 0x9,  // SYSCLK divided by 4
  RCC_AHB_PRESCALER_DIV8   = 0xA,  // SYSCLK divided by 8
  RCC_AHB_PRESCALER_DIV16  = 0xB,  // SYSCLK divided by 16
  RCC_AHB_PRESCALER_DIV64  = 0xC,  // SYSCLK divided by 64
  RCC_AHB_PRESCALER_DIV128 = 0xD,  // SYSCLK divided by 128
  RCC_AHB_PRESCALER_DIV256 = 0xE,  // SYSCLK divided by 256
  RCC_AHB_PRESCALER_DIV512 = 0xF   // SYSCLK divided by 512
} rcc_ahb_prescaler_t;

typedef enum {
  RCC_APB1_PRESCALER_DIV1  = 0x0,  // HCLK not divided
  RCC_APB1_PRESCALER_DIV2  = 0x4,  // HCLK divided by 2
  RCC_APB1_PRESCALER_DIV4  = 0x5,  // HCLK divided by 4
  RCC_APB1_PRESCALER_DIV8  = 0x6,  // HCLK divided by 8
  RCC_APB1_PRESCALER_DIV16 = 0x7   // HCLK divided by 16
} rcc_apb1_prescaler_t;

typedef enum {
  RCC_APB2_PRESCALER_DIV1  = 0x0,  // HCLK not divided
  RCC_APB2_PRESCALER_DIV2  = 0x4,  // HCLK divided by 2
  RCC_APB2_PRESCALER_DIV4  = 0x5,  // HCLK divided by 4
  RCC_APB2_PRESCALER_DIV8  = 0x6,  // HCLK divided by 8
  RCC_APB2_PRESCALER_DIV16 = 0x7   // HCLK divided by 16
} rcc_apb2_prescaler_t;

typedef enum {
  RCC_ADC_PRESCALER_DIV2 = 0x0,  // PCLK2 divided by 2
  RCC_ADC_PRESCALER_DIV4 = 0x1,  // PCLK2 divided by 4
  RCC_ADC_PRESCALER_DIV6 = 0x2,  // PCLK2 divided by 6
  RCC_ADC_PRESCALER_DIV8 = 0x3   // PCLK2 divided by 8
} rcc_adc_prescaler_t;

typedef enum {
  RCC_PLL_MUL2  = 0x0,  // PLL input clock * 2
  RCC_PLL_MUL3  = 0x1,  // PLL input clock * 3
  RCC_PLL_MUL4  = 0x2,  // PLL input clock * 4
  RCC_PLL_MUL5  = 0x3,  // PLL input clock * 5
  RCC_PLL_MUL6  = 0x4,  // PLL input clock * 6
  RCC_PLL_MUL7  = 0x5,  // PLL input clock * 7
  RCC_PLL_MUL8  = 0x6,  // PLL input clock * 8
  RCC_PLL_MUL9  = 0x7,  // PLL input clock * 9
  RCC_PLL_MUL10 = 0x8,  // PLL input clock * 10
  RCC_PLL_MUL11 = 0x9,  // PLL input clock * 11
  RCC_PLL_MUL12 = 0xA,  // PLL input clock * 12
  RCC_PLL_MUL13 = 0xB,  // PLL input clock * 13
  RCC_PLL_MUL14 = 0xC,  // PLL input clock * 14
  RCC_PLL_MUL15 = 0xD,  // PLL input clock * 15
  RCC_PLL_MUL16 = 0xE   // PLL input clock * 16
} rcc_pll_mul_t;

typedef enum {
  RCC_PLL_SRC_HSI_DIV_2,
  RCC_PLL_SRC_HSE,
  RCC_PLL_SRC_HSE_DIV_2
} rcc_pll_src_t;

//RCC functions
//functions for configuring clocks
void rcc_cfg_pll(rcc_pll_src_t pll_src, rcc_pll_mul_t pll_mul);
void rcc_cfg_sysclk(rcc_sysclk_src_t clk_src);   //selects the system clock source
void rcc_cfg_adc_prescalers(rcc_adc_prescaler_t adc_prsclr);
void rcc_cfg_ahb_prescalers(rcc_ahb_prescaler_t ahb_prsclr);
void rcc_cfg_apb1_prescalers(rcc_apb1_prescaler_t apb1_prsclr);
void rcc_cfg_apb2_prescalers(rcc_apb2_prescaler_t apb2_prsclr);

//functions for calculating clocks
uint32_t rcc_get_pllclk();
uint32_t rcc_get_sysclk();
uint32_t rcc_get_hclk();
uint32_t rcc_get_pclk1();
uint32_t rcc_get_pclk2();

//system timer configuration
//tick_ms: duration of a system tick
void rcc_cfg_systick(uint32_t tick_period_ms);   //configures the system timer to trigger at every tick_ms ms 

//todo: enable/disable/clear clock interrupts


//RCC clock enable macros
//------------------------------------------------------------------------------------
// Clock Enable Macros for APB2 Peripherals
#define RCC_APB2ENR_AFIO_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_AFIOEN_Msk)
#define RCC_APB2ENR_IOPA_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_IOPAEN_Msk)
#define RCC_APB2ENR_IOPB_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_IOPBEN_Msk)
#define RCC_APB2ENR_IOPC_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_IOPCEN_Msk)
#define RCC_APB2ENR_IOPD_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_IOPDEN_Msk)
#define RCC_APB2ENR_IOPE_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_IOPEEN_Msk)
#define RCC_APB2ENR_IOPF_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_IOPFEN_Msk)
#define RCC_APB2ENR_IOPG_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_IOPGEN_Msk)
#define RCC_APB2ENR_ADC1_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_ADC1EN_Msk)
#define RCC_APB2ENR_ADC2_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_ADC2EN_Msk)
#define RCC_APB2ENR_TIM1_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_TIM1EN_Msk)
#define RCC_APB2ENR_SPI1_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_SPI1EN_Msk)
#define RCC_APB2ENR_TIM8_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_TIM8EN_Msk)
#define RCC_APB2ENR_USART1_CLK_ENABLE()  (RCC->APB2ENR |= RCC_APB2ENR_USART1EN_Msk)
#define RCC_APB2ENR_ADC3_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_ADC3EN_Msk)
#define RCC_APB2ENR_TIM9_CLK_ENABLE()    (RCC->APB2ENR |= RCC_APB2ENR_TIM9EN_Msk)
#define RCC_APB2ENR_TIM10_CLK_ENABLE()   (RCC->APB2ENR |= RCC_APB2ENR_TIM10EN_Msk)
#define RCC_APB2ENR_TIM11_CLK_ENABLE()   (RCC->APB2ENR |= RCC_APB2ENR_TIM11EN_Msk)
// Clock Enable Macros for APB1 Peripherals
#define RCC_APB1ENR_TIM2_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_TIM2EN_Msk)
#define RCC_APB1ENR_TIM3_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_TIM3EN_Msk)
#define RCC_APB1ENR_TIM4_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_TIM4EN_Msk)
#define RCC_APB1ENR_TIM5_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_TIM5EN_Msk)
#define RCC_APB1ENR_TIM6_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_TIM6EN_Msk)
#define RCC_APB1ENR_TIM7_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_TIM7EN_Msk)
#define RCC_APB1ENR_TIM12_CLK_ENABLE()   (RCC->APB1ENR |= RCC_APB1ENR_TIM12EN_Msk)
#define RCC_APB1ENR_TIM13_CLK_ENABLE()   (RCC->APB1ENR |= RCC_APB1ENR_TIM13EN_Msk)
#define RCC_APB1ENR_TIM14_CLK_ENABLE()   (RCC->APB1ENR |= RCC_APB1ENR_TIM14EN_Msk)
#define RCC_APB1ENR_WWDG_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_WWDGEN_Msk)
#define RCC_APB1ENR_SPI2_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_SPI2EN_Msk)
#define RCC_APB1ENR_SPI3_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_SPI3EN_Msk)
#define RCC_APB1ENR_USART2_CLK_ENABLE()  (RCC->APB1ENR |= RCC_APB1ENR_USART2EN_Msk)
#define RCC_APB1ENR_USART3_CLK_ENABLE()  (RCC->APB1ENR |= RCC_APB1ENR_USART3EN_Msk)
#define RCC_APB1ENR_UART4_CLK_ENABLE()   (RCC->APB1ENR |= RCC_APB1ENR_UART4EN_Msk)
#define RCC_APB1ENR_UART5_CLK_ENABLE()   (RCC->APB1ENR |= RCC_APB1ENR_UART5EN_Msk)
#define RCC_APB1ENR_I2C1_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_I2C1EN_Msk)
#define RCC_APB1ENR_I2C2_CLK_ENABLE()    (RCC->APB1ENR |= RCC_APB1ENR_I2C2EN_Msk)
#define RCC_APB1ENR_USB_CLK_ENABLE()     (RCC->APB1ENR |= RCC_APB1ENR_USBEN_Msk)
#define RCC_APB1ENR_CAN_CLK_ENABLE()     (RCC->APB1ENR |= RCC_APB1ENR_CANEN_Msk)
#define RCC_APB1ENR_BKP_CLK_ENABLE()     (RCC->APB1ENR |= RCC_APB1ENR_BKPEN_Msk)
#define RCC_APB1ENR_PWR_CLK_ENABLE()     (RCC->APB1ENR |= RCC_APB1ENR_PWREN_Msk)
#define RCC_APB1ENR_DAC_CLK_ENABLE()     (RCC->APB1ENR |= RCC_APB1ENR_DACEN_Msk)
// Clock Enable Macros for AHB Peripherals
#define RCC_AHBENR_DMA1_CLK_ENABLE()     (RCC->AHBENR |= RCC_AHBENR_DMA1EN_Msk)
#define RCC_AHBENR_DMA2_CLK_ENABLE()     (RCC->AHBENR |= RCC_AHBENR_DMA2EN_Msk)
#define RCC_AHBENR_SRAM_CLK_ENABLE()     (RCC->AHBENR |= RCC_AHBENR_SRAMEN_Msk)
#define RCC_AHBENR_FLITF_CLK_ENABLE()    (RCC->AHBENR |= RCC_AHBENR_FLITFEN_Msk)
#define RCC_AHBENR_CRC_CLK_ENABLE()      (RCC->AHBENR |= RCC_AHBENR_CRCEN_Msk)
#define RCC_AHBENR_FSMC_CLK_ENABLE()     (RCC->AHBENR |= RCC_AHBENR_FSMCEN_Msk)
#define RCC_AHBENR_SDIO_CLK_ENABLE()     (RCC->AHBENR |= RCC_AHBENR_SDIOEN_Msk)

//RCC clock disable macros
//------------------------------------------------------------------------------------
// Clock Disable Macros for APB2 Peripherals
#define RCC_APB2ENR_AFIO_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_AFIOEN_Msk)
#define RCC_APB2ENR_IOPA_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_IOPAEN_Msk)
#define RCC_APB2ENR_IOPB_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_IOPBEN_Msk)
#define RCC_APB2ENR_IOPC_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_IOPCEN_Msk)
#define RCC_APB2ENR_IOPD_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_IOPDEN_Msk)
#define RCC_APB2ENR_IOPE_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_IOPEEN_Msk)
#define RCC_APB2ENR_IOPF_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_IOPFEN_Msk)
#define RCC_APB2ENR_IOPG_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_IOPGEN_Msk)
#define RCC_APB2ENR_ADC1_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_ADC1EN_Msk)
#define RCC_APB2ENR_ADC2_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_ADC2EN_Msk)
#define RCC_APB2ENR_TIM1_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_TIM1EN_Msk)
#define RCC_APB2ENR_SPI1_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_SPI1EN_Msk)
#define RCC_APB2ENR_TIM8_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_TIM8EN_Msk)
#define RCC_APB2ENR_USART1_CLK_DISABLE()  (RCC->APB2ENR &= ~RCC_APB2ENR_USART1EN_Msk)
#define RCC_APB2ENR_ADC3_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_ADC3EN_Msk)
#define RCC_APB2ENR_TIM9_CLK_DISABLE()    (RCC->APB2ENR &= ~RCC_APB2ENR_TIM9EN_Msk)
#define RCC_APB2ENR_TIM10_CLK_DISABLE()   (RCC->APB2ENR &= ~RCC_APB2ENR_TIM10EN_Msk)
#define RCC_APB2ENR_TIM11_CLK_DISABLE()   (RCC->APB2ENR &= ~RCC_APB2ENR_TIM11EN_Msk)
// Clock Disable Macros for APB1 Peripherals
#define RCC_APB1ENR_TIM2_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_TIM2EN_Msk)
#define RCC_APB1ENR_TIM3_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_TIM3EN_Msk)
#define RCC_APB1ENR_TIM4_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_TIM4EN_Msk)
#define RCC_APB1ENR_TIM5_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_TIM5EN_Msk)
#define RCC_APB1ENR_TIM6_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_TIM6EN_Msk)
#define RCC_APB1ENR_TIM7_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_TIM7EN_Msk)
#define RCC_APB1ENR_TIM12_CLK_DISABLE()   (RCC->APB1ENR &= ~RCC_APB1ENR_TIM12EN_Msk)
#define RCC_APB1ENR_TIM13_CLK_DISABLE()   (RCC->APB1ENR &= ~RCC_APB1ENR_TIM13EN_Msk)
#define RCC_APB1ENR_TIM14_CLK_DISABLE()   (RCC->APB1ENR &= ~RCC_APB1ENR_TIM14EN_Msk)
#define RCC_APB1ENR_WWDG_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_WWDGEN_Msk)
#define RCC_APB1ENR_SPI2_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_SPI2EN_Msk)
#define RCC_APB1ENR_SPI3_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_SPI3EN_Msk)
#define RCC_APB1ENR_USART2_CLK_DISABLE()  (RCC->APB1ENR &= ~RCC_APB1ENR_USART2EN_Msk)
#define RCC_APB1ENR_USART3_CLK_DISABLE()  (RCC->APB1ENR &= ~RCC_APB1ENR_USART3EN_Msk)
#define RCC_APB1ENR_UART4_CLK_DISABLE()   (RCC->APB1ENR &= ~RCC_APB1ENR_UART4EN_Msk)
#define RCC_APB1ENR_UART5_CLK_DISABLE()   (RCC->APB1ENR &= ~RCC_APB1ENR_UART5EN_Msk)
#define RCC_APB1ENR_I2C1_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_I2C1EN_Msk)
#define RCC_APB1ENR_I2C2_CLK_DISABLE()    (RCC->APB1ENR &= ~RCC_APB1ENR_I2C2EN_Msk)
#define RCC_APB1ENR_USB_CLK_DISABLE()     (RCC->APB1ENR &= ~RCC_APB1ENR_USBEN_Msk)
#define RCC_APB1ENR_CAN_CLK_DISABLE()     (RCC->APB1ENR &= ~RCC_APB1ENR_CANEN_Msk)
#define RCC_APB1ENR_BKP_CLK_DISABLE()     (RCC->APB1ENR &= ~RCC_APB1ENR_BKPEN_Msk)
#define RCC_APB1ENR_PWR_CLK_DISABLE()     (RCC->APB1ENR &= ~RCC_APB1ENR_PWREN_Msk)
#define RCC_APB1ENR_DAC_CLK_DISABLE()     (RCC->APB1ENR &= ~RCC_APB1ENR_DACEN_Msk)
// Clock Disable Macros for AHB Peripherals
#define RCC_AHBENR_DMA1_CLK_DISABLE()     (RCC->AHBENR &= ~RCC_AHBENR_DMA1EN_Msk)
#define RCC_AHBENR_DMA2_CLK_DISABLE()     (RCC->AHBENR &= ~RCC_AHBENR_DMA2EN_Msk)
#define RCC_AHBENR_SRAM_CLK_DISABLE()     (RCC->AHBENR &= ~RCC_AHBENR_SRAMEN_Msk)
#define RCC_AHBENR_FLITF_CLK_DISABLE()    (RCC->AHBENR &= ~RCC_AHBENR_FLITFEN_Msk)
#define RCC_AHBENR_CRC_CLK_DISABLE()      (RCC->AHBENR &= ~RCC_AHBENR_CRCEN_Msk)
#define RCC_AHBENR_FSMC_CLK_DISABLE()     (RCC->AHBENR &= ~RCC_AHBENR_FSMCEN_Msk)
#define RCC_AHBENR_SDIO_CLK_DISABLE()     (RCC->AHBENR &= ~RCC_AHBENR_SDIOEN_Msk)


//RCC reset macros
//------------------------------------------------------------------------------------
// Reset Macros for APB2 Peripherals
#define RCC_APB2RSTR_AFIO_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_AFIORST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_AFIORST_Msk; })
#define RCC_APB2RSTR_IOPA_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_IOPARST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_IOPARST_Msk; })
#define RCC_APB2RSTR_IOPB_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_IOPBRST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_IOPBRST_Msk; })
#define RCC_APB2RSTR_IOPC_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_IOPCRST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_IOPCRST_Msk; })
#define RCC_APB2RSTR_IOPD_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_IOPDRST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_IOPDRST_Msk; })
#define RCC_APB2RSTR_IOPE_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_IOPERST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_IOPERST_Msk; })
#define RCC_APB2RSTR_IOPF_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_IOPFRST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_IOPFRST_Msk; })
#define RCC_APB2RSTR_IOPG_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_IOPGRST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_IOPGRST_Msk; })
#define RCC_APB2RSTR_ADC1_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_ADC1RST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_ADC1RST_Msk; })
#define RCC_APB2RSTR_ADC2_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_ADC2RST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_ADC2RST_Msk; })
#define RCC_APB2RSTR_TIM1_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_TIM1RST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM1RST_Msk; })
#define RCC_APB2RSTR_SPI1_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_SPI1RST_Msk; })
#define RCC_APB2RSTR_TIM8_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_TIM8RST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM8RST_Msk; })
#define RCC_APB2RSTR_USART1_RESET() ({ RCC->APB2RSTR |= RCC_APB2RSTR_USART1RST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_USART1RST_Msk; })
#define RCC_APB2RSTR_ADC3_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_ADC3RST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_ADC3RST_Msk; })
#define RCC_APB2RSTR_TIM9_RESET()   ({ RCC->APB2RSTR |= RCC_APB2RSTR_TIM9RST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM9RST_Msk; })
#define RCC_APB2RSTR_TIM10_RESET()  ({ RCC->APB2RSTR |= RCC_APB2RSTR_TIM10RST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM10RST_Msk; })
#define RCC_APB2RSTR_TIM11_RESET()  ({ RCC->APB2RSTR |= RCC_APB2RSTR_TIM11RST_Msk; RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM11RST_Msk; })
// Reset Macros for APB1 Peripherals using GCC ({...}) Syntax
#define RCC_APB1RSTR_TIM2_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM2RST_Msk; })
#define RCC_APB1RSTR_TIM3_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_TIM3RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM3RST_Msk; })
#define RCC_APB1RSTR_TIM4_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_TIM4RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM4RST_Msk; })
#define RCC_APB1RSTR_TIM5_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_TIM5RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM5RST_Msk; })
#define RCC_APB1RSTR_TIM6_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_TIM6RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM6RST_Msk; })
#define RCC_APB1RSTR_TIM7_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_TIM7RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM7RST_Msk; })
#define RCC_APB1RSTR_TIM12_RESET()  ({ RCC->APB1RSTR |= RCC_APB1RSTR_TIM12RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM12RST_Msk; })
#define RCC_APB1RSTR_TIM13_RESET()  ({ RCC->APB1RSTR |= RCC_APB1RSTR_TIM13RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM13RST_Msk; })
#define RCC_APB1RSTR_TIM14_RESET()  ({ RCC->APB1RSTR |= RCC_APB1RSTR_TIM14RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM14RST_Msk; })
#define RCC_APB1RSTR_WWDG_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_WWDGRST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_WWDGRST_Msk; })
#define RCC_APB1RSTR_SPI2_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_SPI2RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI2RST_Msk; })
#define RCC_APB1RSTR_SPI3_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_SPI3RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI3RST_Msk; })
#define RCC_APB1RSTR_USART2_RESET() ({ RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST_Msk; })
#define RCC_APB1RSTR_USART3_RESET() ({ RCC->APB1RSTR |= RCC_APB1RSTR_USART3RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_USART3RST_Msk; })
#define RCC_APB1RSTR_UART4_RESET()  ({ RCC->APB1RSTR |= RCC_APB1RSTR_UART4RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_UART4RST_Msk; })
#define RCC_APB1RSTR_UART5_RESET()  ({ RCC->APB1RSTR |= RCC_APB1RSTR_UART5RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_UART5RST_Msk; })
#define RCC_APB1RSTR_I2C1_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST_Msk; })
#define RCC_APB1RSTR_I2C2_RESET()   ({ RCC->APB1RSTR |= RCC_APB1RSTR_I2C2RST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C2RST_Msk; })
#define RCC_APB1RSTR_USB_RESET()    ({ RCC->APB1RSTR |= RCC_APB1RSTR_USBRST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_USBRST_Msk; })
#define RCC_APB1RSTR_CAN_RESET()    ({ RCC->APB1RSTR |= RCC_APB1RSTR_CANRST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_CANRST_Msk; })
#define RCC_APB1RSTR_BKP_RESET()    ({ RCC->APB1RSTR |= RCC_APB1RSTR_BKPRST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_BKPRST_Msk; })
#define RCC_APB1RSTR_PWR_RESET()    ({ RCC->APB1RSTR |= RCC_APB1RSTR_PWRRST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_PWRRST_Msk; })
#define RCC_APB1RSTR_DAC_RESET()    ({ RCC->APB1RSTR |= RCC_APB1RSTR_DACRST_Msk; RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST_Msk; })

